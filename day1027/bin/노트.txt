 ** 멀티프로세서와 멀티쓰레드를 비교하여 설명하시오
 	멀티프로세서: 하나의 컴퓨터에서 동시에 여러프로그램을 실행하는 것
 	멀티쓰레드: 하나의 프로그램에서 동시에 여러기능이 동작하는 것

** 자바에서는 "멀티쓰레드 프로그래밍"을 위하여
	Thread 클래스 와 Runnable 인터페이스를 제공한다.

** "멀티쓰레드 프로그래밍"을 위하여 Thread클래스를 상속받으면
	run 메소드를 오버라이딩하여 공평하게 실행할 명령어를 작성하고
	쓰레드를 실행시키기 위해서는 이 클래스의 객체를 생성한 다음 start 메소드를 호출한다.

** 쓰레드를 가동하기위해서
	run()을 직접 호출하면 일반적인 메소드 실행흐름으로 동작하기 때문에
   	start()를 호출해야 쓰레드를 가동시킨다.

** Runnalbe 인터페이스를 이용하여 "멀티쓰레드 프로그래밍"을 구현할 때에도
	run()을 오버라이딩하여 공평하게 실행시키고자 하는 명령어(들)을 작성해준다.
	그러나,
	Runnalbe 인터페이스에는 run()만 존재하기 때문에
	쓰레드를 가동 시키기 위하여 직접 start()를 호출할 수 없으며
	Thread 클래스로 포장하여 start()를 호출해야한다.
	
=================================================================================

Thread의 우선순위를 설정할 수 있다.

우선순위 설정 메소드
setPriority(int newPriority)
	Changes the priority of this thread.
	
	newPriority 매개변수는 1~10까지의 정수를 전달한다
	숫자가 높을수록 우선순위가 높다
	상수값으로도 이미 만들어 져 있다.
	
	우선순위가 높다는 것은, 
	가급적이면 다른 쓰레드보다는 일을 빨리 끝내달라는 의미이지
	반드시 그 쓰레드가 일을 빨리 끝내는 것이 보장되는 것은 아니다.
---------------------------------------------------
Thread 안에
매개변수로 쓸 수 있는 상수로 정의된 변수들
The maximum priority that a thread can have.
	static int	MAX_PRIORITY
	             public static final int MAX_PRIORITY
	
The minimum priority that a thread can have.
	static int	MIN_PRIORITY

The default priority that is assigned to a thread.
	static int	NORM_PRIORITY -- 중간값
----------------------------------------------------

상수가 가지고 있는 값
Modifier and Type	Constant Field	   Value
public static final int	MAX_PRIORITY	10
public static final int	MIN_PRIORITY	1
public static final int	NORM_PRIORITY	5
=============================================
**join메소드
	쓰레드가 종료될 때까지 대기시키기위한 메소드
	
	쓰레드를 가동시키면 그때부터는 명령어가 순서대로 동작하지 않고
	가급적이면 공평하게 실행이 되게끔 스케줄리해준다.
	만약, 어떠한 명령어(들)가 쓰레드가 완전히 종료한 다음에 실행시키고자한다면
	join메소드를 호출하여 쓰레드가 모두 종료될때까지 대기하도록 한다.
	
join()
Waits for this thread to die.

public final void join()
                throws InterruptedException
                
========================================================

임계영역 (Critical Section)
	두개이상의 쓰레드가 공유하는 자원(어떤클래스의 멤버변수)에 대하여
	한번에 하나의 쓰레드에게만 접근을 허용하는 영역(멤버변수)을 말한다.
	-- 한 쓰레드가 그 자원을 사용하고 있으면 다른 쓰레드는 접근못하게 막는 것

자바에서는 임계영역의 처리를 위하여 "synchronized" 키워드를 사용

한번에 하나의 쓰레드에게만 접근허용하는 메소드의 이름 왼쪽에
synchronized라고 써주면 자바가 알아서 임계영역의 처리르 해준다 
	즉, 한번에 하나의 쓰레드만 접근하도록 lock을 걸어주고 일이 끝나면 lock을 풀어준다
	
----------------------------------------------------------------------------
com.sist.ars 패키지

임계영역에 대한 실습을 위하여 ARS모금액을 위한 프로그램을 작성해보자

	"ARS 모금액"을 위한 클래스를 만들고
	돈을 보내는 "성금자"를 위한 클래스를 만들어보자
	
	"ARS 모금액"클래스는
		"잔액"을 위한 멤버변수와
		"입금"을 위한 기능을 갖도록 한다
		"입금"을 위한 메소드는 위한 메소드는 "잔액"을 증가시키는 명령어로 쓰여질 것입니다.
		이 메소드는 한번에 하나의 쓰레드만 접근하도록 메소드이름 앞에 synchronized를 붙여 "임계영역"으로 설정
		
	"성금자"클래스는
		쓰레드로 구현될 것이며
		성금자의 멤버변수로 "ARS 모금액"의 객체로 갖도록합니다
		
		모두 5명의 "성금자"객체를 생성하여
		경쟁적으로 "입금"하도록 하려고 합니다.
		
		5명의 "성금자"는 "ARS모금액"의 객체를 "공유"하도록 합니다.
		
	전화 한통 : 1000원 입금
	모금액 : 100000원이 되도록함
	
	쓰레드가 다 종료되면 모금액 출력
	
-------------------------------------------------

클래스이름을 수정하고나서
엔터치고 저장해야 바뀐 클래스명으로 클래스파일이 생성이된다

클래스이름 바꿀때
PackageExplorer창에서
바꾸고 싶은 패키지클릭 오른쪽
Refacor - rename에서 하면
클래스 이름 수정과 동시에 사용된 곳의 이름도 같이 바뀜
----------------------------------------------------------
**쓰레드 사이의 통신
"쓰레드"를 가동시키면 가급적으로 서로 공평하게 실행되게끔 "스케줄링"을 해줌
늘(항상, 언제나) 공평하게 실행되진 않음
어떤 특정 스레드가 연달아 동작하기도함

만약, 두개의 쓰레드가 반드시 공평하게 1:1로 동작해야한다면
"쓰레드 사이의 통신"을 통하여 구현할 수 있어요

자바의 모든 클래스들은 Object의 후손
우리가 만드는 모든 클래스들은 묵시적으로 Object를 상속받음
Object클래스에는 쓰레드 사이의 통신을 위한
wait메소드와 notify메소드가 있다.
	
	wait메소드는 쓰레드 자신을 "대기상태"로 두는 메소드
	notify는 대기중인 다른 쓰레드를 꺠워주는 메소드

즉, 다른 쓰레드가 일이 끝날때까지
	나는 대기상태(wait)에 있도록 하고
	내가 일이 끝나면 notify()를 호출하여 대기상태에 있는 다른 쓰레드를 깨워줌으로써
	쓰레드 사이의 통신을 할 수 있다.
------------------------------------------------------------------------------

쓰레드 사이의 통신을 위한 실습
 "생산자" 클래스와 "소비자" 클래스를 만들어 본다
 
 "생산자" 는 계속하여 새로운 제품(정수) 생산하기만하고
 "소비자" 는 계쏙하여 제품을 소비하기만 하도록 만든다
 
 그런데, "생산자"가 새로운 제품을 만들지도 않았는데 소비가 일어나지 않도록 하고 싶다.
 또, 소비자가 아까 생산했던 제품을 소비하지도 않았는데 생산하지 않도록 하고 싶다.
 
 즉, 생산자와 소비자 클래스 간의 wait, notify 메소드를 이용하여
 	생산자는 아까 만든 제품이 소비가 이루어지지 않는 동안 "대기상태"로 있고
 	소비가 일어나면, 새로운 제품을 생산합니다.
 	"소비자"는 새로운 제품을 만들기 전까지는 "대기상태"에 있다가 
 	새로운 제품이 만들어지면 소비를 하도록 한다.
 
 이것을 위하여 "제품"이라는 클래스를 먼저 만들어요.
   "제품"클래스에는 제품을 생산하는 메소드와 소비하는 메소드로 구성되며
   이것들은 "임계영역" 설정을 위하여 synchronized로 표현합니다.
   	
 "생산자"와 "소비자"는 "제품"이라는 클래스의 객체를 서로 공유하도록 만들어요,
 ----------------------------------------------------------------
 
 ***파일 입출력 프로그래밍
 
프로그램 실행결과를 화면에 출력하면 "휘발성"입니다.
컴퓨터를 끄면 혹은 창을 닫으면 출력한 결과가 사라짐
 만약 프로그램 실행결과를 영구적으로 기록해야한다면
 화면 출력 대신 파일로 출력할 수 있다.

자바에서는 입력 및 출력을 위하여 
 "스트림"을 만들어 제공한다.
 
 "스트림"은 "순서있는 자료의 흐름"을 말한다.
 ex)
 "안녕하세요"라는 문자열을 출력하려면
 순서대로 자료가 나가야 하고

 또, 읽어들일때에도
 순서대로 자료가 와야한다.
 

 이와같이 순서있는 자료의 흐름을 "스트림"이라고한다.
 
 자바에서는 스트림(입출력)을 위한 클래스들을
 java.io 패키지에 모아놓음
 
 =========================================================
 
 입출력(스트림)을 위한 최상위 클래스는 크게 두가지 종류가 있다.
 문자단위의 입출력 
 	문자의 입출력은 말 그대로 문자를 출력하고 읽어들이는 것
 	이렇게 생성된 파일은 메모장같은 편집기에서 바로 내용을 확인할 수 있다.
 	확장자는 일반적으로 .txt로 만든다.
 	
 바이트단위의 입출력 
 	파일은 txt파일이외
 	그림파일이나 소리파일이나 동영상 등은
 	메모장에서 바로 내용을 확인할 수 없고
 	특정 프로그램에서 내용을 확인해야하는 파일들이다
 	이러한 파일은 바이트단위의 입출력으로 처리해야한다.
 
 ==========================================================
 문자단위의 입출력을 위한 클래스
 Reader
 Writer
 
 바이트단위으 입출력을 위한 클래스
 InputStream
 OutputStream
 
 ------------------------------
 public int read()
         throws IOException
The character read, or -1 if the end of the stream has been reached
 
 프로그램 완성
 일찍 끝나면
 바이트단위의 입출력도 실험해본다
 
 다음과 같은 파일의 내용을 읽어들여
 학생의 이름과 국,영,수 점수를 출력한다음 총점과 평균을 각각구하여 출력하느 ㄴ프로그램 작성
 student.txt
 홍길동,100,80,90
 
 