많은 양의 데이터를 처리하기 위해서는 "배열"을 이용할 수 있다.
배열을 이용하면 필요한만큼 일일히 변수이름을 정해주지 않고
대표하는 이름을 정하고 크기를 줌으로써 변수를 빠르게 사용할 수 있다.
또,
반복문을 이용하여 일괄처리할 수 있다.

배열의 단점
1. 자료형이 같은 데이터만 담을 수 있음
2. 크기가 고정적임(한번 정하면 수정 불가)
    원래 크기보다 더 적은 데이터를 담으면 메모리 낭비
    원래 크기보다 더 많은 데이터를 담으려면 더 큰 배열을 새롭게 정의해
    기존의 데이터를 다 옮겨 주는 작업을 필요로함

 이러한 단점을 해결하기 위하여
 자바에서는 "컬렉션 프레임워크"를 제공한다.
 
 <컬렉션프레임워크>
	*E : Object라고 보면됨
	동적배열의 개념
	많은 양의 자료를 처리하기 위한 자료구조
	자료형이 다른것도 담을 수 있고
	동적으로 데이터를 추가하거나, 삭제하는 작업이 편리함

	컬렉션프레임워크의 종류
	 Set, List, Map
	  모두 많은 자료를 처리하기 위한 자료구조.
	  동적으로 데이터를 추가하거나 삭제하거나 서로 다른 자료형을 담을 수 있음
	  
	Set
	 데이터의 중복 불가
	 
	 *주요 자식클래스
	  
	  HashSet
	   데이터의 중복 불가, 데이터의 순서를 유지하지않음 --> 내가 넣은 순서대로 출력되지않음
	   
	  LinkedHashSet
	   데이터의 중복 불가, 데이터의 순서 유지
	   
	  TreeSet
		데이터의 중복 불가, 데이터를 정렬해줌
	
	*메서드
	 add(E e)
	  boolean 값을 반환함, 중복이면 false를 반환하고 중복이아닌 값은 true를 반환
	 
	 addAll(Collection<? extends E> c)
	 ㅇ
	 clear()
	  데이터 삭제
	 contains(Object o)	
	 
	List
	 어떠한 자료형이던지 담을 수 있고
	 데이터의 추가 및 삭제가 용이하며
	 데이터의 중복 허용
	 
	Set 과 List는 배열처럼 인덱스에 의해 자료에 접근하는 방식
	
	*주요 자식클래스(List인터페이스를 구현)
	  사용방법은 거의 유사
	  ArrayList 와 LinkedList는 사용하기위한 메서드는 동일하지만,
	  내부적으로 동작하는 방식이 다름
	  데이터의 중간에 추가, 삭제가 빈번한 경우
	  ArrayList 보다는 LinkedList를 사용하는 것이 좋다.
	   ArrayList는 데이터를 수정하면 내부적으로 새로운 메모리공간을 생성해서 데이터를 수정하고 옮겨서 참조하게한다 -- 배열처럼 동작
	              배열안의 데이터가 연속적
	   LinkedList는 추가하는 자료의 앞뒤의 참조하는 주소값만 병경이 됩니다.
		
		ArrayList //가장 많이 사용됨
			get()
			 Object 타입을 반환함
		
		LinkedList
		 배열안의 데이터가 연속적인게 아니라
		 데이터들의 주소를 모아놓은 것?(내부적으로 배열처럼 동작)
		 ex) 100번지에 1이있고
		     300번지에 2가 있어
		     각 번지의 값을 가져오는게아니라 주소로 연결?
		 
		Vector // 자바초기에 많이 사용, 요즘은 그닥
	
	Map
	 인덱스대신에 자료에 접근하기 위하여 Key를 이용하는 방식
	 Key와 그 Key에 해당하는 Value가 한쌍으로 이루어진 자료구조
	 
	 HashMap
	 
	 메서드
	 .put(key , value)
	 .get(key) :인덱스번호로 접근해서 가져오는게 아니라 key로 접근해서 value를 가져온다
				key는 중복될 수 없음
				value는 중복가능
-----------------------------------------------------------------------------------
Random 클래스
 임의의 값(정수, boolean, double ...)을 생성하기 위한 클래스
 
  *메서드
   nextInt()
    int가 표현할 수 있는 최소값 ~ 최대값 범위안의 난수 발생
   nextInt(int bound)
    범위의 bound를 줌 
    0에서부터 <value 사이의 난수 값
   next자료형
    자료형범위안의 난수발생
 ----------------------------------------------------------------------------
 기본자료형을 객체로 만들어주는 클래스들을 Wrapper 클래스라고함
 boolean	Boolean
 char		Character
 byte		Byte
 short		Short
 int		Integer
 long		Long
 float		Float
 double		Double
 ------------------------------------------------------------------
 ArrayList<String> list = new ArrayList<String>();
   list안에는 String을 담을 수 있다.
 
 ArrayList<ArrayList<String>> list = new ArrayList<ArrayList<String>>();
   list안에 담는 자료형이 ArrayList
 ---------------------------------------------------------------------------------
 <컬렉션프레임워크의 종류>
 Set 	자료의 중복을 허용하지 않음
 List	자료의 중복허용
 Map	key와 value가 한쌍으로 이루어진 자료구조
 