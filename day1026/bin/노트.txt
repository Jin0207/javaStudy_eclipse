보통 catch절의 매개변수는 e로한다.

finally
 예외처리에서 예외가 발생하건, 정상적으로 동작하건,
 반드시 처리해야할 명령어(들)을 쓰기 위하여 사용하는 문장
 
 어떤 명령어를 쓸까?
  주로 파일처리나, 네트워크통신이나, 데이터베이스 연결프로그램에서
  작업이 끝난 다음에는
  사용한 자원을 반드시 닫아주어야 하기에,
  (예외가 발생하든, 정상동작하든 반드시 닫아야함)
  자원을 닫아주는 명령어(close)를 작성한다.

.printStackTrace();
 예외가 발생하는 어떤 메소드가 있을 때
 그 메서드를 다른 메서드가 호출하고
 또, 그 메소드를 또다른 메소드가 호출하고
 .. 막 이렇게 되어 있을 때,
 
 누가 근본적으로 예외를 발생시키는지
 추적하기 위하여 사용하는 메서드
 
 ex)
 public void pro(int a, int b){
 	int r = a / b;
 }
 public void hello(int a, int b){
 	pro(a,b);
 }
 hello에서 예외는 근본적으로 pro메소드에서 발생하는 것
 -----------------------------------------------------------
 
 q) 배열의 크기를 0으로 하였을때,
 avg = (double)tot / data.length;
 
 배열의 평균: NaN
 
 NaN : Not A Number (상수값이라고 생각하면됨)
 숫자가 아니다 -- 계산할 수 없다.
 ----------------------------------------------------------
 
 멀티 프로세스: 
 	하나의 컴퓨터에서 동시에 여러프로그램을 실행시킬 수 있는 것
 	
 멀티 쓰레드:
 	하나의 프로그램에서 동시에 여러개의 메소드를 동작시키는 것
 	
----------------------------------------------------------
Person p = new Person("홍길이");
Person p2 = new Person("길홍이");
p.sayHello();
p2.sayHello();

위의코드를 실행시키면
p의 sayHello메소드가 다 끝나야
p2의 sayHello메소드가 실행될 수 있다.
만약, p의 sayHello메소드를 동작하다가 문제가 발생이 되면
p2의 sayHello메소드는 실행조차 할 수 없다.

가능하면, 두개의 객체가 동시에(공평하게) 동작하게끔하기위해
"멀티쓰레드 프로그래밍"을 구현한다.

자바에서는 "멀티쓰레드 프로그래밍"을 위하여
Thread 클래스 와
Runnable 인터페이스 를 제공한다.

<Thread클래스를 이용하여 "멀티쓰레드 프로그래밍"하기>	
	
	Thread클래스를 상속받아 클래스를 만들고
	이때 run메소드를 오버라이딩하여
	동시에(공평하게) 실행시킬 명령어(들)을 써준다.
	
     class PrimeThread extends  Thread {
     
         public void run() { //run을 오버라이딩해서 공평하게 실행시키고 싶은 작업을 {}안에 적어준다
             // compute primes larger than minPrime
              . . .
         }
     }
     
     쓰레드를 가동시키기 위해서는
     객체를 생성한 다음 start()를 호출
      = 가능하면 공평하게 일을 실행시키는 법
      
     PrimeThread p = new PrimeThread();
     p.start();
     
	//쓰레드를 가동(동시에 공평하게 실행 해봐요)하려면 "start()"호출
	//그런데 start를 호출하지 않고 run()을 직접 호출하면
	//일반메소드처럼 동작한다. ( 호출순서대로 실행 )

----------------------------------------------------------------------------------------

<Runnable 인터페이스를 구현하여 멀티쓰레드 프로그래밍 만들기>
메소드를 run()만 가지고 있음
Runnable 인터페이스를 구현한 클래스를 만들고
이때 run 메소드를 오버라이딩 하여 동시에(공평하게) 실행시키고자 하는 명령어(들)을  써준다.

쓰레드를 가동하기 위하여
Thread클래스로 포장하여
start()호출
//
Thread(Runnable target)
Allocates a new Thread object.

inner class
다른 곳에서 쓸일없고 여기서만 쓸거야
클래스 안 클래스

















