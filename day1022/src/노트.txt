문자열을 구분자로 분리하기
  String 클래스
	split()
	StringTokenize()
	
----------------------------------------------

public static void insertWord(HashMap<String, String> map) {
		System.out.println("새로운 단어를 등록합니다.");
		System.out.print("영어 단어를 입력하세요-->");
		eng = sc.next(); //girl(enter)
		System.out.print("단어의 뜻을 입력하세요-->");
		kor = sc.nextLine(); // 위의 enter를 눌린게 자기껀줄알고 입력받아버림
		/*
			sc.nextLine(); //입력버퍼의 내용을 지움 -- enter를 받아감
			kor = sc.nextLine();
		*/
		map.put(eng, kor);
		System.out.println("새로운 단어를 등록하였습니다.");
	}

Q) 한국어 뜻을 입력할 때, 공백문자를 입력하고 싶다.
	sc.next(), sc.nextLine()의 동작방식은 서로 다르다.
	
	next()는 입력의 구분을 스페이스, tab, enter로 구분
	nextLine()은 엔터로만 구분
	
	키보드로부터 입력하는 모든 것들은 "입력버퍼"를 통하여
	변수에 대입됨
	next()와 nextLine()을 같이 사용할 땐
	입력버퍼의 내용을 지워줘야함
	
	입력버퍼의 내용을 지워주기 위해서는 nextLin()을 한번 더 사용하면 됩니다.
	
---------------------------------------------------------------
자바의
<컬렉션프레임워크>
	많은 양의 데이터를 처리하기 위하여 일반적으로 배열을 사용하나
	배열이 가진 단점들(자료형이 같아야하고 크기가 고정적임)을 해결하기 위하여
	자바에서는 동적 배열을 위한 컬렉션프레임워크를 이용한다.
	
	컬렉션프레임워크의 종류는
		Set, List, Map
		
		Set
			중복된 자료 허용하지 않음
		
		List
			중복된 자료를 허용함
		
		Map
			Key,Value가 한쌍으로 이루어진 자료구조

---------------------------------------------------------------------------------

<<예외처리>>
	프로그램의 문법에는 오류가 없으나
	실행 중에 사용자의 부주의 등으로 인하여 발생하는 예기치 않은 상황을 "예외"라고 한다.
	이러한 "예외"를 처리하는 것을 "예외처리"라고 한다.
	
	예기치 않은 상황은 다양할 수 있다.
	ex)
		정수를 입력해야하는 데 문자열을 입력한다.
		어떤 숫자를 0으로 나눈다
		배열의 인덱스를 넘는 범위를 사용한다.
	
	이러한 예외는 대개 사용자의 부주의로 인해 발생한다.
	이러한 예외를 그냥 두게 되면
	사용자들은 자신들이 잘못했음에도 불만을 갖기때문에
	이러한 예외들을 "예외처리"해주어야한다.

-> 자바에서는 대부분의 예기치않은 상황에 대한 "예외"클래스가 이미 만들어져 있다.
	ex)
		배열의 범위를 넘는 경우
			java.lang.ArrayIndexOutOfBounsException 클래스형에 객체가 자동으로 생성됩니다.
	
<< 예외 처리 방법>>
try{
		예외가 발생할 만한 명령어들
	}catch( 예외클래스명 변수명 ){
		예외가 발생되었을 때, 처리할 명령어(들)
	}catch( 예외클래스명2 변수명 ){
		예외가 발생되었을 때, 처리할 명령어(들)
	}

예외클래스들도 상속계층으로 구성되어 있으며
모든 예외들의 최고 조상은 "Exception"클래스 입니다.
그렇기에 모든 예외를 뭉쳐서 Exception 하나만 받는 catch절로 처리할 수 있다

필요하다면
  각각에 예외에 다른 별도의 catch를 만들 수도 있다.
 
//메세지를 잘 못알아 듣는다면?
//세분화한 catch로 작성한다
//단, is a 관계라면 범위가 작은 Exeption먼저 catch문을 작성
범위가 큰 게 먼저 오면 오류발생
ex)
DivTestTryCatch04.java:15: error: exception ArithmeticException has already been caught
                }catch(ArithmeticException e){
-----------------------------------------------------------------------------------
	
finally
예외를 처리할 때,	finlly블록을 이용해 예외 발생 여부에 상관없이 코드를 실행시킬수 있음
 예외의 발생여부에 관계없이 실행되어야하는 코드를 작성한다.
 finally는 항상 실행된다.
"finally"블록은 변경된 객체의 상태를 다시 되돌리는 경우에도 사용할 수 있다.
	
	






















